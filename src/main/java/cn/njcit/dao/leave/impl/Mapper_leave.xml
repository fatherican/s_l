<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.njcit.dao.leave.LeaveDao">


    <insert id="addLeave" parameterType="map" >
        insert into tb_leave
        (
        student_id,student_name,class_id,user_no,
        professional_id,colleage_id,need_second_approve,
        instructor_note,student_pipe_note,leave_type,
        course_index,teacher_name,student_mobile,
        course_name,leave_days,student_note,
        leave_start_date,leave_end_date,leave_date,class_name,
        create_time
        )
        value
        (
        #{userId},#{name},#{classId},#{userNo},
        #{professionalId},#{colleageId},#{needSecondApprove},
        #{instructorNote},#{studentPipeNote},#{leaveType},
        #{courseIndex},#{teacherName},#{studentMobile},
        #{courseName},#{leaveDays},#{studentNote},
        #{leaveStartDate},#{leaveEndDate},#{leaveDate},#{className},
        #{createTime}
        )
        <selectKey resultType="java.lang.Short" order="AFTER" keyProperty="leaveId">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="queryLeaveList" resultType="cn.njcit.domain.leave.Leave" parameterType="map">
        select leave_id  as leaveId, student_id as studentId,  student_name as studentName,
        class_id as classId,professional_id as professionalId, colleage_id as colleageId,
        need_second_approve as needSecondApprove,instructor_approved as instructorApproved,student_pipe_approved as studentPipeApproved,
        approved as approved,instructor_note as instructorNote,student_pipe_note as studentPipeNote,
        leave_type as leaveType,course_index as courseIndex,teacher_name as teacherName,
        student_mobile as studentMobile,course_name as courseName,leave_days as leaveDays,
        student_note as studentNote,leave_start_date as leaveStartDate,leave_end_date as leaveEndDate,
        create_time as createTime,leave_sicked as leaveSicked,leave_sick_date as leaveSickDate,
        leave_date as leaveDate
        from tb_leave
        where 1=1
        <if test="studentId!=null and studentId!=''">
            and student_id=#{studentId}
        </if>
        <if test="approved!=null and approved!=''">
            and approved=#{approved}
        </if>
        <if test="approvedStates!=null and approvedStates!=''">
            and approved in
            <foreach collection="approvedStates" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="leaveSicked!=null and leaveSicked!=''">
            and leave_sicked = #{leaveSicked}
        </if>
        <if test="leaveEndDate!=null and leaveEndDate!=''">
            and #{leaveEndDate}>leave_end_date
        </if>
        <if test="createTimeStart!=null and createTimeStart!=''">
            and create_time >= #{createTimeStart}
        </if>
        <if test="createTimeEnd!=null and createTimeEnd!=''">
            and #{createTimeEnd}>=create_time
        </if>
        <if test="leaveDateStart!=null and leaveDateStart!=''">
            and leave_date >= #{leaveDateStart}
        </if>
        <if test="leaveDateEnd!=null and leaveDateEnd!=''">
            and #{leaveDateEnd}>=leave_date
        </if>
        order by leave_date desc
        <choose>
            <when test="begin!=null   and  end!=null ">
                limit #{begin},#{end}
            </when>
            <otherwise>
                limit 20
            </otherwise>
        </choose>


    </select>
    <select id="getUniqueLeave" resultType="cn.njcit.domain.leave.Leave" parameterType="string">
        select  leave_id  as leaveId, student_id as studentId,  student_name as studentName,
                class_id as classId,professional_id as professionalId, colleage_id as colleageId,
                need_second_approve as needSecondApprove,instructor_approved as instructorApproved,student_pipe_approved as studentPipeApproved,
                approved as approved,instructor_note as instructorNote,student_pipe_note as studentPipeNote,
                leave_type as leaveType,course_index as courseIndex,teacher_name as teacherName,
                student_mobile as studentMobile,course_name as courseName,leave_days as leaveDays,
                student_note as studentNote,leave_start_date as leaveStartDate,leave_end_date as leaveEndDate,
                create_time as createTime,leave_sicked as leaveSicked,leave_sick_date as leaveSickDate,
                leave_date as leaveDate
        from tb_leave
        where leave_id=#{leaveId}

    </select>


    <delete id="delLeaveItem" parameterType="map">
        delete
        from tb_leave
        where student_id=#{userId} and leave_id=#{leaveId}

    </delete>

    <update id="updateLeaveApprovedState" parameterType="map">
        update tb_leave
        <set>
            approved=#{approved},
            <if test="role==1">  <!--辅导员-->
                instructor_approved = #{instructorApproved,jdbcType=VARCHAR},
                instructor_note = #{note,jdbcType=VARCHAR},
            </if>
            <if test="role==2">  <!-- 学管处-->
                student_pipe_approved = #{studentPipeApproved,jdbcType=VARCHAR},
                student_pipe_note = #{note,jdbcType=VARCHAR},
            </if>
        </set>
        where leave_id=#{leaveId,jdbcType=VARCHAR}
    </update>

    <update id="sickLeave" parameterType="map">
        update tb_leave
        set leave_sicked=#{leaveSicked} , leave_sick_date=#{leaveSickDate}
         where leave_id=#{leaveId}
    </update>
    <update id="editLeave" parameterType="map">
        update tb_leave
        <set>
            <if test="needSecondApprove!=null and needSecondApprove!=''">
                need_second_approve=#{needSecondApprove},
            </if>
            <if test="instructorNote!=null and instructorNote!=''">
                instructor_note=#{instructorNote},
            </if>
            <if test="studentPipeNote!=null and studentPipeNote!=''">
                student_pipe_note=#{studentPipeNote},
            </if>
             <if test="leaveType!=null and leaveType!=''">
                 leave_type=#{leaveType},
            </if>
             <if test="courseIndex!=null and courseIndex!=''">
                 course_index=#{courseIndex},
            </if>
             <if test="teacherName!=null and teacherName!=''">
                 teacher_name=#{teacherName},
            </if>
             <if test="studentMobile!=null and studentMobile!=''">
                 student_mobile=#{studentMobile},
            </if>
             <if test="courseName!=null and courseName!=''">
                 course_name=#{courseName},
            </if>
             <if test="leaveDays!=null and leaveDays!=''">
                 leave_days=#{leaveDays},
            </if>
             <if test="studentNote!=null and studentNote!=''">
                 student_note=#{studentNote},
            </if>
             <if test="leaveStartDate!=null and leaveStartDate!=''">
                 leave_start_date=#{leaveStartDate},
            </if>
            <if test="leaveEndDate!=null and leaveEndDate!=''">
                leave_end_date=#{leaveEndDate},
            </if>
            <if test="leaveDate!=null and leaveDate!=''">
                leave_date=#{leaveDate},
            </if>
            <if test="className!=null and className!=''">
                class_name=#{className},
            </if>
            <if test="updateTime!=null and updateTime!=''">
                update_time=#{updateTime},
            </if>
        </set>
        where leave_id=#{leaveId}
    </update>


    <select id="getLeaveList" parameterType="map" resultType="cn.njcit.domain.leave.Leave">
        select leave_id  as leaveId, student_id as studentId,  student_name as studentName,
        class_id as classId,professional_id as professionalId, colleage_id as colleageId,
        need_second_approve as needSecondApprove,instructor_approved as instructorApproved,student_pipe_approved as studentPipeApproved,
        approved as approved,instructor_note as instructorNote,student_pipe_note as studentPipeNote,
        leave_type as leaveType,course_index as courseIndex,teacher_name as teacherName,
        student_mobile as studentMobile,course_name as courseName,leave_days as leaveDays,
        student_note as studentNote,leave_start_date as leaveStartDate,leave_end_date as leaveEndDate,
        create_time as createTime,leave_sicked as leaveSicked,leave_sick_date as leaveSickDate,
        leave_date as leaveDate
        from tb_leave
        where 1=1
        <if test="approved!=null and approved!=''">
            and approved=#{approved}
        </if>
        <if test="classId!=null and classId!=''">
            and class_id=#{classId}
        </if>
        <if test="colleageId!=null and colleageId!=''">
            and colleage_id=#{colleageId}
        </if>
        <if test="classes!=null and classes!=''">
            and class_id in
            <foreach collection="classes" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="startTime!=null and startTime!=''">
            and create_time>=#{startTime}
        </if>
        <if test="endTime!=null and endTime!=''">
            and #{endTime}>=create_time
        </if>
        <if test="leaveSicked!=null and leaveSicked!=''">
            and leave_sicked=#{leaveSicked}
        </if>
        order by create_time desc
        <choose>
            <when test="start!=null and end!=null ">
                limit #{start},#{end}
            </when>
            <otherwise>
                limit 20
            </otherwise>
        </choose>
    </select>
    <select id="getSickLeaveList" parameterType="map" resultType="cn.njcit.domain.leave.Leave">
        select  leave_id  as leaveId, student_id as studentId,  student_name as studentName,
        class_id as classId,professional_id as professionalId, colleage_id as colleageId,
        need_second_approve as needSecondApprove,instructor_approved as instructorApproved,student_pipe_approved as studentPipeApproved,
        approved as approved,instructor_note as instructorNote,student_pipe_note as studentPipeNote,
        leave_type as leaveType,course_index as courseIndex,teacher_name as teacherName,
        student_mobile as studentMobile,course_name as courseName,leave_days as leaveDays,
        student_note as studentNote,leave_start_date as leaveStartDate,leave_end_date as leaveEndDate,
        create_time as createTime,leave_sicked as leaveSicked,leave_sick_date as leaveSickDate,
        leave_date as leaveDate
        from tb_leave
        where approved=1
        <if test="leaveSicked!=null and leaveSicked!=''">
            and leave_sicked=#{leaveSicked}
        </if>
        <if test="colleageId!=null and colleageId!=''">
            and colleage_id =#{colleageId}
        </if>
        <if test="classList!=null">
            and class_id in
            <foreach item="item" collection="classList" separator="," open="(" close=")" index="">
                #{item.class_id}
            </foreach>
        </if>
        <if test="classId!=null and classId!=''">
            and class_id =#{classId}
        </if>
        <if test="leave_sicked==1"><!-- 已销假只查询最近三天的销假记录-->
            and leave_sick_date >#{leaveSickDateStart} and #{leaveSickDateEnd}>leave_sick_date
        </if>
        <if test="leave_sicked==0"><!-- 未销假只查询已经审批的请假列表-,并且当前日期大于截止日期的假条-->
            and #{leaveEndDate}>leave_end_date
        </if>
        <if test="createTimeStart!=null and createTimeStart!=''">
            and create_time>=#{createTimeStart}
        </if>
        <if test="createTimeEnd!=null and createTimeEnd!=''">
            and #{createTimeEnd}>=create_time
        </if>
        <if test="leave_sicked==1"><!-- 已经销假的，那么就按照 销假日期排序，倒序排序-->
            order by leave_sick_date desc
        </if>
        <if test="leave_sicked==0"><!-- 未销假的，那么就按照 请假日期 ，倒序排序-->
            order by create_time desc
        </if>
        <choose>
            <when test="start!=null and end!=null ">
                limit #{start},#{end}
            </when>
            <otherwise>
                limit 20
            </otherwise>
        </choose>
    </select>
    <select id="statisticsLeaveDays" resultType="java.lang.Integer" parameterType="hashmap">
        SELECT IF(sum(tl.leave_days) is null,0,sum(tl.leave_days))  leaveDays
        from tb_leave tl
        where tl.student_id=#{userId} and tl.approved=1 and tl.leave_type=1
        <include refid="studentStatisticsWhereStatement"/>
    </select>
    <select id="statisticsLeaveCourseTimes" resultType="java.lang.Integer">
        SELECT IF(count(1) is null,0,count(1))  times
        from tb_leave tl
        where tl.student_id=#{userId}  and tl.approved=1 and tl.leave_type=0
        <include refid="studentStatisticsWhereStatement"/>
        <if test="courseList!=null and courseList!=''">
            and tl.course_index in
            <foreach collection="courseList" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>

    </select>
    <select id="teacherGetLeaveStatistics" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT tl.user_no studentNum,tl.student_name studentName,
        sum(
            (
                CASE
                when tl.leave_type='0' and (tl.course_index=1 or tl.course_index=3 or tl.course_index=5 or tl.course_index=9 or tl.course_index=17) then 1
                ELSE 0
                END
            )
        ) firstClassTimes,
        sum(
            (
                CASE
                when tl.leave_type='0' and (tl.course_index=2 or tl.course_index=3 or tl.course_index=6 or tl.course_index=10 or tl.course_index=18) then 1
                ELSE 0
                END
            )
        ) secondClassTimes,
        sum(
            (
                CASE
                when tl.leave_type='0' and (tl.course_index=5 or tl.course_index=6 or tl.course_index=4 or tl.course_index=12 or tl.course_index=20) then 1
                ELSE 0
                END
            )
        ) thirdClassTimes,
        sum(
            (
                CASE
                when tl.leave_type='0' and (tl.course_index=9 or tl.course_index=10 or tl.course_index=12 or tl.course_index=8 or tl.course_index=24) then 1
                ELSE 0
                END
            )
        ) fourthClassTimes,
        sum(
            (
                CASE
                when tl.leave_type='0' and (tl.course_index=17 or tl.course_index=18 or tl.course_index=20 or tl.course_index=24 or tl.course_index=16) then 1
                ELSE 0
                END
            )
        ) fifthClassTimes,
        sum(
            (
                CASE
                when tl.leave_type='1' then tl.leave_days
                ELSE 0
                END
            )
        ) leaveDays
        from tb_leave tl
        where 1=1
        <if test="classIdList!=null and classIdList!=''">
            and tl.class_id in
            <foreach collection="classIdList" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="classId!=null and classId!=''">
            and tl.class_id = #{classId}
        </if>
        <if test="studentNum!=null and studentNum!=''">
            and tl.user_no = #{studentNum}
        </if>
        <if test="colleageId!=null and colleageId!=''">
            and tl.colleage_id=#{colleageId}
        </if>
        <include refid="studentStatisticsWhereStatement"/>
        group by tl.student_id,tl.student_name
        order by studentNum
        <choose>
            <when test="start!=null and end!=null ">
                limit #{start},#{end}
            </when>
            <otherwise>
                limit 20
            </otherwise>
        </choose>
    </select>
    <sql id="studentStatisticsWhereStatement">
        <if test="startTime!=null and startTime!=''">
          and tl.create_time>#{startTime}
        </if>
        <if test="endTime!=null and endTime!=''">
            and #{endTime}>tl.create_time
        </if>
    </sql>


</mapper>